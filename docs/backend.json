{
  "entities": {
    "CreatorDashboard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CreatorDashboard",
      "type": "object",
      "description": "Represents the main dashboard for creators, providing an overview of their business, recent activity, and actionable insights.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the CreatorDashboard entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:1 CreatorDashboard)"
        },
        "statsCards": {
          "type": "array",
          "description": "An array of stats card identifiers that represent business metrics.",
          "items": {
            "type": "string"
          }
        },
        "revenueHighlights": {
          "type": "number",
          "description": "Total revenue generated by the creator's business."
        },
        "recentActivityIds": {
          "type": "array",
          "description": "References to Activities. (Relationship: CreatorDashboard 1:N Activity)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "creatorId"
      ]
    },
    "Conversation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Conversation",
      "type": "object",
      "description": "Represents a single conversation between a user/agent and the AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Conversation entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N Conversation)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Conversation)"
        },
        "agentId": {
          "type": "string",
          "description": "Reference to Agent. (Relationship: Agent 1:N Conversation)"
        },
        "startTime": {
          "type": "string",
          "description": "The date and time when the conversation started.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The date and time when the conversation ended.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the conversation (e.g., active, waiting, closed)."
        }
      },
      "required": [
        "id",
        "creatorId",
        "userId",
        "startTime",
        "status"
      ]
    },
    "AiTraining": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiTraining",
      "type": "object",
      "description": "Represents the training data and configuration for the AI chatbot.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AiTraining entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N AiTraining)"
        },
        "articleIds": {
          "type": "array",
          "description": "References to Articles. (Relationship: AiTraining 1:N Article)",
          "items": {
            "type": "string"
          }
        },
        "documentUrls": {
          "type": "array",
          "description": "The URLs of documents used for training the AI chatbot.",
          "items": {
            "type": "string"
          }
        },
        "websiteCrawlerConfig": {
          "type": "string",
          "description": "Configuration settings for the website crawler."
        }
      },
      "required": [
        "id",
        "creatorId"
      ]
    },
    "Article": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Article",
      "type": "object",
      "description": "Represents an article used for training the AI chatbot.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Article entity."
        },
        "aiTrainingId": {
          "type": "string",
          "description": "Reference to AiTraining. (Relationship: AiTraining 1:N Article)"
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "content": {
          "type": "string",
          "description": "The content of the article."
        }
      },
      "required": [
        "id",
        "aiTrainingId",
        "title",
        "content"
      ]
    },
    "Team": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Team",
      "type": "object",
      "description": "Represents a team of agents within the creator's workspace.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Team entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N Team)"
        },
        "agentIds": {
          "type": "array",
          "description": "References to Agents. (Relationship: Team 1:N Agent)",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "The name of the team."
        }
      },
      "required": [
        "id",
        "creatorId",
        "name"
      ]
    },
    "Agent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Agent",
      "type": "object",
      "description": "Represents an agent within the creator's workspace.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Agent entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N Agent)"
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N Agent)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Agent)",
          "format": "uuid"
        },
        "role": {
          "type": "string",
          "description": "The role of the agent within the team."
        }
      },
      "required": [
        "id",
        "creatorId",
        "userId",
        "role"
      ]
    },
    "Widget": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Widget",
      "type": "object",
      "description": "Represents the configuration and settings for the chat widget.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Widget entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N Widget)"
        },
        "design": {
          "type": "string",
          "description": "The design settings for the chat widget."
        },
        "branding": {
          "type": "string",
          "description": "The branding settings for the chat widget."
        },
        "autoTriggers": {
          "type": "string",
          "description": "The auto trigger settings for the chat widget."
        },
        "installationCode": {
          "type": "string",
          "description": "The installation code for the chat widget."
        },
        "domain": {
          "type": "string",
          "description": "The associated domain for the widget."
        }
      },
      "required": [
        "id",
        "creatorId",
        "design",
        "branding"
      ]
    },
    "Analytics": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Analytics",
      "type": "object",
      "description": "Represents in-depth reports on chats, AI performance, agent performance, user satisfaction, and growth.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Analytics entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N Analytics)"
        },
        "chatMetrics": {
          "type": "string",
          "description": "The chat metrics data."
        },
        "aiPerformance": {
          "type": "string",
          "description": "The AI performance data."
        },
        "agentPerformance": {
          "type": "string",
          "description": "The agent performance data."
        },
        "userSatisfaction": {
          "type": "string",
          "description": "The user satisfaction data."
        },
        "growthData": {
          "type": "string",
          "description": "The growth data."
        }
      },
      "required": [
        "id",
        "creatorId",
        "chatMetrics",
        "aiPerformance"
      ]
    },
    "Billing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Billing",
      "type": "object",
      "description": "Represents the billing and subscription information for the creator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Billing entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N Billing)"
        },
        "subscriptionPlan": {
          "type": "string",
          "description": "The current subscription plan for the creator."
        },
        "paymentHistory": {
          "type": "string",
          "description": "The payment history for the creator."
        },
        "invoices": {
          "type": "string",
          "description": "The invoices for the creator."
        },
        "paymentMethod": {
          "type": "string",
          "description": "The payment method for the creator."
        }
      },
      "required": [
        "id",
        "creatorId",
        "subscriptionPlan"
      ]
    },
    "Settings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Settings",
      "type": "object",
      "description": "Represents the settings for the creator's workspace.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Settings entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N Settings)"
        },
        "workspaceProfile": {
          "type": "string",
          "description": "The workspace profile settings."
        },
        "businessHours": {
          "type": "string",
          "description": "The business hours settings."
        },
        "notificationPreferences": {
          "type": "string",
          "description": "The notification preferences settings."
        },
        "integrations": {
          "type": "string",
          "description": "The integrations settings."
        }
      },
      "required": [
        "id",
        "creatorId",
        "workspaceProfile"
      ]
    },
    "SupportTicket": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SupportTicket",
      "type": "object",
      "description": "Represents a support ticket submitted by the creator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the SupportTicket entity."
        },
        "creatorId": {
          "type": "string",
          "description": "Reference to Creator. (Relationship: Creator 1:N SupportTicket)"
        },
        "status": {
          "type": "string",
          "description": "The status of the support ticket."
        },
        "subject": {
          "type": "string",
          "description": "The subject of the support ticket."
        },
        "description": {
          "type": "string",
          "description": "The description of the support ticket."
        },
        "submittedAt": {
          "type": "string",
          "description": "The date and time when the support ticket was submitted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "creatorId",
        "status",
        "subject"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application. (Assumed to exist from signup API)",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "Creator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Creator",
      "type": "object",
      "description": "Represents a creator user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Creator entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Creator)"
        },
        "name": {
          "type": "string",
          "description": "The name of the creator."
        }
      },
      "required": [
        "id",
        "userId",
        "name"
      ]
    },
    "Activity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Activity",
      "type": "object",
      "description": "Represents an activity performed within the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Activity entity."
        },
        "creatorDashboardId": {
          "type": "string",
          "description": "Reference to CreatorDashboard. (Relationship: CreatorDashboard 1:N Activity)"
        },
        "type": {
          "type": "string",
          "description": "The type of activity performed."
        },
        "description": {
          "type": "string",
          "description": "The description of the activity performed."
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time when the activity was performed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "creatorDashboardId",
        "type",
        "description",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user information. Accessed by the user themselves.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}",
        "definition": {
          "entityName": "Creator",
          "schema": {
            "$ref": "#/backend/entities/Creator"
          },
          "description": "Stores creator information. Accessed by the creator themselves.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/dashboard",
        "definition": {
          "entityName": "CreatorDashboard",
          "schema": {
            "$ref": "#/backend/entities/CreatorDashboard"
          },
          "description": "Stores creator dashboard data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/conversations/{conversationId}",
        "definition": {
          "entityName": "Conversation",
          "schema": {
            "$ref": "#/backend/entities/Conversation"
          },
          "description": "Stores conversation data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "conversationId",
              "description": "The unique identifier of the conversation."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/ai_training/{aiTrainingId}",
        "definition": {
          "entityName": "AiTraining",
          "schema": {
            "$ref": "#/backend/entities/AiTraining"
          },
          "description": "Stores AI training data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "aiTrainingId",
              "description": "The unique identifier of the AI training data."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/ai_training/{aiTrainingId}/articles/{articleId}",
        "definition": {
          "entityName": "Article",
          "schema": {
            "$ref": "#/backend/entities/Article"
          },
          "description": "Stores article data. Includes denormalized 'creatorId' through the parent 'aiTrainingId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "aiTrainingId",
              "description": "The unique identifier of the AI training data."
            },
            {
              "name": "articleId",
              "description": "The unique identifier of the article."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/teams/{teamId}",
        "definition": {
          "entityName": "Team",
          "schema": {
            "$ref": "#/backend/entities/Team"
          },
          "description": "Stores team data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "teamId",
              "description": "The unique identifier of the team."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/agents/{agentId}",
        "definition": {
          "entityName": "Agent",
          "schema": {
            "$ref": "#/backend/entities/Agent"
          },
          "description": "Stores agent data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "agentId",
              "description": "The unique identifier of the agent."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/widgets/{widgetId}",
        "definition": {
          "entityName": "Widget",
          "schema": {
            "$ref": "#/backend/entities/Widget"
          },
          "description": "Stores widget data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "widgetId",
              "description": "The unique identifier of the widget."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/analytics/{analyticsId}",
        "definition": {
          "entityName": "Analytics",
          "schema": {
            "$ref": "#/backend/entities/Analytics"
          },
          "description": "Stores analytics data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "analyticsId",
              "description": "The unique identifier of the analytics data."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/billing/{billingId}",
        "definition": {
          "entityName": "Billing",
          "schema": {
            "$ref": "#/backend/entities/Billing"
          },
          "description": "Stores billing data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "billingId",
              "description": "The unique identifier of the billing data."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/settings/{settingsId}",
        "definition": {
          "entityName": "Settings",
          "schema": {
            "$ref": "#/backend/entities/Settings"
          },
          "description": "Stores settings data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "settingsId",
              "description": "The unique identifier of the settings data."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/support_tickets/{supportTicketId}",
        "definition": {
          "entityName": "SupportTicket",
          "schema": {
            "$ref": "#/backend/entities/SupportTicket"
          },
          "description": "Stores support ticket data. Includes denormalized 'creatorId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "supportTicketId",
              "description": "The unique identifier of the support ticket."
            }
          ]
        }
      },
      {
        "path": "/creators/{creatorId}/activities/{activityId}",
        "definition": {
          "entityName": "Activity",
          "schema": {
            "$ref": "#/backend/entities/Activity"
          },
          "description": "Stores activity data related to a creator's dashboard. Includes denormalized 'creatorId' through the parent 'creatorDashboardId' for authorization independence.",
          "params": [
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            },
            {
              "name": "activityId",
              "description": "The unique identifier of the activity."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure and scalable solution for the ChatGenius application, focusing on the creator dashboard and related features. The primary goal is to ensure authorization independence, simplify security rules, and enable secure list operations. Here's a breakdown:\n\n1.  **Authorization Independence:** Each top-level collection is scoped to a `creatorId`, effectively isolating data and eliminating the need for `get()` calls to parent documents for authorization. This is achieved by including the `creatorId` in every document within the collections associated with the creator's dashboard, such as `conversations`, `ai_training`, `teams`, `widgets`, `analytics`, `billing`, `settings`, and `support_tickets`. This denormalization of the `creatorId` ensures that each document's access control can be determined independently.\n\n2.  **Structural Segregation:** All documents within each collection share the same security requirements, enhancing rule simplicity. For instance, all documents in `/creators/{creatorId}/conversations` are accessible only to the creator with the matching `creatorId` or authorized agents.\n\n3.  **Access Modeling:**\n    *   **Path-Based Ownership:** Data related to a specific creator is stored under the `/creators/{creatorId}` path, ensuring that only the creator or authorized agents can access their data. This pattern is consistently applied across all subcollections.\n    *   **Global Roles (DBAC):** Not explicitly implemented but could be added using a `/roles_admin/{uid}` collection if certain users require admin privileges.\n\n4.  **QAPs (Rules are not Filters):** The structure supports secure `list` operations by scoping collections to the `creatorId`. Rules can easily enforce that only the creator can list documents within their designated subcollections. For example, listing conversations is secured by checking `request.auth.uid == resource.data.creatorId`.\n\n5.  **Invariants:** The structure supports the integrity of ownership by consistently using the `creatorId` field and path-based ownership. Timestamps such as `startTime` and `submittedAt` can be enforced in rules to maintain data integrity."
  }
}