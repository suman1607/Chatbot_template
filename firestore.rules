/**
 * @fileoverview Firestore Security Rules for ChatGenius Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user and workspace ownership.
 * Schema validation is relaxed to enable rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Public user profiles, accessible to everyone.
 * - /workspaces/{workspaceId}: Workspace settings, owned by a specific user.
 * - /workspaces/{workspaceId}/members/{userId}:  Defines user roles and permissions within a workspace.
 * - /workspaces/{workspaceId}/aiConfig: AI configuration for the workspace (singleton document).
 * - /workspaces/{workspaceId}/knowledge/{docId}: Knowledge sources for AI training.
 * - /workspaces/{workspaceId}/trainingRuns/{runId}: Logs of AI training jobs.
 *
 * Key Security Decisions:
 * - Users can only list knowledge documents within workspaces they have access to.
 * - Strict ownership enforced for workspace creation, updates, and deletion.
 * - AI Config is a singleton document and protected with workspace ownership.
 * - Read operations are generally public where explicit ownership isn't required but may need further review.
 *
 * Denormalization for Authorization:
 * The rules leverage the `ownerId` field within workspace documents for authorization,
 * ensuring that only the owner can modify workspace settings.
 * WorkspaceMember documents associate users with Workspaces.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read user profiles. Users can only create/update their own profile.
     * @path /users/{userId}
     * @allow (get, list): if true
     * @allow (create, update): if isOwner(userId)
     * @deny (delete): if true
     * @principle Allows public read access to user profiles, but enforces owner-only writes for security.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Enforces owner-only access to workspace settings.
     * @path /workspaces/{workspaceId}
     * @allow (get, list): if true
     * @allow (create): if request.resource.data.ownerId == request.auth.uid
     * @allow (update, delete): if isExistingOwner(resource.data.ownerId)
     * @deny Creation if `ownerId` in the data does not match the user. Modification requires existing ownership.
     * @principle Enforces document ownership for writes.
     */
    match /workspaces/{workspaceId} {
      allow get, list: if true;
      allow create: if request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages user roles and permissions within a workspace. Access is controlled by workspace ownership.
     * @path /workspaces/{workspaceId}/members/{userId}
     * @allow (get, list): if true
     * @allow (create): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @allow (update): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @allow (delete): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @principle Access to workspace members controlled by workspace ownership.
     */
    match /workspaces/{workspaceId}/members/{userId} {
      allow get, list: if true;
      allow create: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to the AI configuration document for a workspace.
     * @path /workspaces/{workspaceId}/aiConfig
     * @allow (get, list): if true
     * @allow (create, update, delete): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @principle Restricts modification of AI configuration to the workspace owner.
     */
    match /workspaces/{workspaceId}/aiConfig {
      allow get, list: if true;
      allow create: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Manages knowledge documents within a workspace, allowing listing by workspace members.
     * @path /workspaces/{workspaceId}/knowledge/{docId}
     * @allow (get, list): if true
     * @allow (create): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @allow (update): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @allow (delete): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @principle Restricts modification of knowledge documents to workspace owner.
     */
    match /workspaces/{workspaceId}/knowledge/{docId} {
      allow get, list: if true;
      allow create: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to training run logs within a workspace.
     * @path /workspaces/{workspaceId}/trainingRuns/{runId}
     * @allow (get, list): if true
     * @allow (create): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @allow (update): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @allow (delete): if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
     * @principle Restricts modification of training run logs to workspace owner.
     */
    match /workspaces/{workspaceId}/trainingRuns/{runId} {
      allow get, list: if true;
      allow create: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }
  }
}