/**
 * @fileoverview Firestore Security Rules for ChatGenius Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user roles and ownership, while remaining flexible on data shapes to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /workspaces/{workspaceId}: Stores top-level settings for a workspace, including the workspace owner.
 * - /workspaces/{workspaceId}/members/{userId}: Stores role and permission information for users within a workspace.
 * - /workspaces/{workspaceId}/aiConfig/config: Singleton document containing AI configuration for the workspace.
 * - /workspaces/{workspaceId}/knowledge/{docId}: Collection of knowledge documents used for AI training.
 * - /workspaces/{workspaceId}/trainingRuns/{runId}: Logs of all AI training jobs for the workspace.
 *
 * Key Security Decisions:
 * - Strict ownership checks are enforced for user-specific data and workspace resources.
 * - Workspace membership determines access to workspace-related data (AI config, knowledge, training runs).
 * - No public listing of user or workspace data is allowed without authentication.
 *
 * Denormalization for Authorization:
 * - Workspace documents store the ownerId, which is used to quickly verify workspace ownership.
 * - WorkspaceMember documents store role and permission information, allowing for rule-based access control within a workspace.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can create their own profile.
     * @allow (get, list) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can read their own profile data.
     * @allow (update, delete) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can update or delete their own profile.
     * @deny (create) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' cannot create another user's profile.
     * @deny (get, list) User 'randomUid' cannot read other user's profile data.
     * @deny (update, delete) User 'randomUid' cannot update or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to workspace settings.
     * @path /workspaces/{workspaceId}
     * @allow (create) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can create a workspace if they are the owner.
     * @allow (get, list) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can read a workspace if they are the owner.
     * @allow (update, delete) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can update or delete a workspace if they are the owner.
     * @deny (create) User 'randomUid' cannot create a workspace for another user.
     * @deny (get, list) User 'randomUid' cannot read workspaces they do not own.
     * @deny (update, delete) User 'randomUid' cannot update or delete a workspace they do not own.
     * @principle Enforces workspace ownership for workspace settings.
     */
    match /workspaces/{workspaceId} {
      allow get: if isWorkspaceOwner(workspaceId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isWorkspaceOwner(workspaceId);
      allow delete: if isWorkspaceOwner(workspaceId);
    }

    /**
     * @description Controls access to workspace member roles and permissions.
     * @path /workspaces/{workspaceId}/members/{userId}
     * @allow (create) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' who is workspace owner can add members.
     * @allow (get, list) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can read members if they are workspace owner or member.
     * @allow (update, delete) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can update/delete members if workspace owner.
     * @deny (create) User 'randomUid' cannot add members if not workspace owner.
     * @deny (get, list) User 'randomUid' cannot read members if not owner or member.
     * @deny (update, delete) User 'randomUid' cannot update/delete members if not workspace owner.
     * @principle Manages workspace membership and permissions.
     */
    match /workspaces/{workspaceId}/members/{userId} {
      allow get: if isWorkspaceOwnerOrMember(workspaceId);
      allow list: if false;
      allow create: if isWorkspaceOwner(workspaceId);
      allow update: if isWorkspaceOwner(workspaceId);
      allow delete: if isWorkspaceOwner(workspaceId);
    }

    /**
     * @description Controls access to AI configuration for a workspace.
     * @path /workspaces/{workspaceId}/aiConfig/config
     * @allow (get) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can read AI config if they are workspace owner or member.
     * @allow (create, update, delete) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can manage AI config if workspace owner.
     * @deny (get) User 'randomUid' cannot read AI config if not owner or member.
     * @deny (create, update, delete) User 'randomUid' cannot manage AI config if not workspace owner.
     * @principle Controls access to AI configuration based on workspace membership.
     */
    match /workspaces/{workspaceId}/aiConfig/config {
      allow get: if isWorkspaceOwnerOrMember(workspaceId);
      allow list: if false;
      allow create: if isWorkspaceOwner(workspaceId);
      allow update: if isWorkspaceOwner(workspaceId);
      allow delete: if isWorkspaceOwner(workspaceId);
    }

    /**
     * @description Controls access to knowledge documents for AI training.
     * @path /workspaces/{workspaceId}/knowledge/{docId}
     * @allow (get, list) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can read knowledge documents if workspace owner or member.
     * @allow (create, update, delete) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can manage knowledge documents if workspace owner.
     * @deny (get, list) User 'randomUid' cannot read knowledge documents if not workspace owner or member.
     * @deny (create, update, delete) User 'randomUid' cannot manage knowledge documents if not workspace owner.
     * @principle Controls access to knowledge documents based on workspace membership.
     */
    match /workspaces/{workspaceId}/knowledge/{docId} {
      allow get: if isWorkspaceOwnerOrMember(workspaceId);
      allow list: if isWorkspaceOwnerOrMember(workspaceId);
      allow create: if isWorkspaceOwner(workspaceId);
      allow update: if isWorkspaceOwner(workspaceId);
      allow delete: if isWorkspaceOwner(workspaceId);
    }

    /**
     * @description Controls access to AI training run logs.
     * @path /workspaces/{workspaceId}/trainingRuns/{runId}
     * @allow (get, list) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can read training run logs if workspace owner or member.
     * @allow (create, update, delete) User 'jaCCwV3IglYArRJq2PnZFuMblEk2' can manage training run logs if workspace owner.
     * @deny (get, list) User 'randomUid' cannot read training run logs if not workspace owner or member.
     * @deny (create, update, delete) User 'randomUid' cannot manage AI training run logs if not workspace owner.
     * @principle Controls access to training run logs based on workspace membership.
     */
    match /workspaces/{workspaceId}/trainingRuns/{runId} {
      allow get: if isWorkspaceOwnerOrMember(workspaceId);
      allow list: if isWorkspaceOwnerOrMember(workspaceId);
      allow create: if isWorkspaceOwner(workspaceId);
      allow update: if isWorkspaceOwner(workspaceId);
      allow delete: if isWorkspaceOwner(workspaceId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == userId && resource != null;
  }

  function getWorkspace(workspaceId) {
    return get(/databases/$(database)/documents/workspaces/$(workspaceId));
  }

  function isWorkspaceOwner(workspaceId) {
    return isSignedIn() && getWorkspace(workspaceId).data.ownerId == request.auth.uid;
  }

  function isExistingWorkspaceOwner(workspaceId) {
    return isSignedIn() && getWorkspace(workspaceId).data.ownerId == request.auth.uid && resource != null;
  }

  function isWorkspaceMember(workspaceId) {
    return isSignedIn() && exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid));
  }

  function isWorkspaceOwnerOrMember(workspaceId) {
    return isWorkspaceOwner(workspaceId) || isWorkspaceMember(workspaceId);
  }
}