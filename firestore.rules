/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model within workspaces.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, accessible only to the user themselves.
 * - /workspaces/{workspaceId}: Stores workspace metadata, accessible to workspace members.
 * - /workspaces/{workspaceId}/members/{userId}: Stores workspace member roles and permissions.
 * - /workspaces/{workspaceId}/aiConfig: Stores AI configuration for the workspace, accessible to workspace members.
 * - /workspaces/{workspaceId}/knowledge/{docId}: Stores knowledge source documents, accessible to workspace members.
 * - /workspaces/{workspaceId}/trainingRuns/{runId}: Stores AI training run logs, accessible to workspace members.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the authenticated user.
 * - Workspace data is accessible to members of that workspace based on their roles.
 * - No public listing of user or workspace data is allowed.
 *
 * Denormalization for Authorization:
 * - Workspace membership is managed in the `/workspaces/{workspaceId}/members/{userId}` collection. This collection contains roles and permissions and is used to determine access to workspace resources.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile information only to the user themselves.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the request is made by the user with matching userId.
     *   Example: A user with uid "user123" can read, create, update, and delete their own profile at /users/user123.
     * @deny (get, create, update, delete, list) if the request is made by a different user or an unauthenticated user.
     *   Example: A user with uid "user456" cannot read, create, update, or delete the profile of user "user123" at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages workspaces and enforces access control based on workspace membership.
     * @path /workspaces/{workspaceId}
     * @allow (get, create, update, delete, list) if the user is the owner of the workspace.
     *   Example: The owner of the workspace can perform all operations on the workspace document.
     * @deny (get, create, update, delete, list) if the user is not the owner of the workspace.
     *   Example: A non-owner user cannot create, update, or delete workspace documents.
     * @principle Enforces workspace ownership for modifications.
     */
    match /workspaces/{workspaceId} {
      function isWorkspaceMember(workspaceId) {
        return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid));
      }
        allow get: if isWorkspaceMember(workspaceId);
        allow list: if false;
        allow create: if request.auth != null;
        allow update: if isWorkspaceMember(workspaceId) && resource != null;
        allow delete: if isWorkspaceMember(workspaceId) && resource != null;

      /**
       * @description Manages workspace members and their roles within the workspace.
       * @path /workspaces/{workspaceId}/members/{userId}
       * @allow (get, create, update, delete, list) if the user has sufficient permissions within the workspace.
       *   Example: A workspace admin can manage members.
       * @deny (get, create, update, delete, list) if the user lacks the necessary permissions.
       *   Example: A regular member cannot add or remove other members.
       * @principle Enforces role-based access control for workspace membership.
       */
      match /members/{userId} {
        function isWorkspaceOwner(workspaceId) {
            return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data.role == 'Owner';
        }
          allow get: if isWorkspaceMember(workspaceId);
          allow list: if false;
          allow create: if isWorkspaceOwner(workspaceId);
          allow update: if isWorkspaceOwner(workspaceId) && resource != null;
          allow delete: if isWorkspaceOwner(workspaceId) && resource != null;
      }

      /**
       * @description Manages AI configurations within a workspace.
       * @path /workspaces/{workspaceId}/aiConfig
       * @allow (get, create, update, delete, list) if the user is a member of the workspace.
       * @deny (get, create, update, delete, list) if the user is not a member of the workspace.
       * @principle Restricts AI configuration access to workspace members.
       */
      match /aiConfig {
          allow get: if isWorkspaceMember(workspaceId);
          allow list: if false;
          allow create: if isWorkspaceMember(workspaceId);
          allow update: if isWorkspaceMember(workspaceId) && resource != null;
          allow delete: if isWorkspaceMember(workspaceId) && resource != null;
      }

      /**
       * @description Manages knowledge documents used to train the AI within a workspace.
       * @path /workspaces/{workspaceId}/knowledge/{docId}
       * @allow (get, create, update, delete, list) if the user is a member of the workspace.
       * @deny (get, create, update, delete, list) if the user is not a member of the workspace.
       * @principle Restricts knowledge document access to workspace members.
       */
      match /knowledge/{docId} {
          allow get: if isWorkspaceMember(workspaceId);
          allow list: if isWorkspaceMember(workspaceId);
          allow create: if isWorkspaceMember(workspaceId);
          allow update: if isWorkspaceMember(workspaceId) && resource != null;
          allow delete: if isWorkspaceMember(workspaceId) && resource != null;
      }

      /**
       * @description Manages AI training run logs within a workspace.
       * @path /workspaces/{workspaceId}/trainingRuns/{runId}
       * @allow (get, create, update, delete, list) if the user is a member of the workspace.
       * @deny (get, create, update, delete, list) if the user is not a member of the workspace.
       * @principle Restricts training run log access to workspace members.
       */
      match /trainingRuns/{runId} {
          allow get: if isWorkspaceMember(workspaceId);
          allow list: if isWorkspaceMember(workspaceId);
          allow create: if isWorkspaceMember(workspaceId);
          allow update: if isWorkspaceMember(workspaceId) && resource != null;
          allow delete: if isWorkspaceMember(workspaceId) && resource != null;
      }
    }
  }
}