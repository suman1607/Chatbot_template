/**
 * @fileoverview Firestore Security Rules for ChatGenius application.
 *
 * Core Philosophy:
 * This ruleset employs a strict ownership model for user data and a collaborative access model for workspaces.
 * Users can only manage their own profiles. Workspaces are secured via an ownerId field, allowing the owner to control workspace settings and AI configurations.
 * Access to knowledge sources and training runs within a workspace is also restricted to the workspace owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /workspaces/{workspaceId}: Stores workspace metadata, including the owner.
 * - /workspaces/{workspaceId}/members/{userId}: Defines workspace membership and roles.
 * - /workspaces/{workspaceId}/aiConfig/config: Stores AI configuration settings.
 * - /workspaces/{workspaceId}/knowledge/{docId}: Stores individual pieces of knowledge.
 * - /workspaces/{workspaceId}/trainingRuns/{runId}: Tracks AI training runs.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Workspace data can only be read or written by the workspace owner.
 * - Listing of users is disallowed.
 * - The aiConfig document is treated as a singleton resource nested under the workspace, and access is restricted to the workspace owner.
 *
 * Denormalization for Authorization:
 * - The `Workspace` entity has an `ownerId` field, which is used to grant the owner access to the workspace and its subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the given user ID.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the given user ID.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Rule set for user profiles.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (matching UID).
     * @allow (get) If the user is requesting their own profile.
     * @allow (update) If the user is updating their own profile.
     * @allow (delete) If the user is deleting their own profile.
     * @deny (create) If the user is trying to create a profile for another user.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule set for workspaces.
     * @path /workspaces/{workspaceId}
     * @allow (create) Not directly allowed; workspaces are likely created via a backend function.
     * @allow (get) If the user is the owner of the workspace.
     * @allow (update) If the user is the owner of the workspace.
     * @allow (delete) If the user is the owner of the workspace.
     * @deny (create) Creation should happen via a server function, not client-side.
     * @deny (list) Listing workspaces is not allowed.
     * @principle Enforces workspace ownership.
     */
    match /workspaces/{workspaceId} {
      allow get: if resource.data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if false;
      allow update: if resource.data.ownerId == request.auth.uid;
      allow delete: if resource.data.ownerId == request.auth.uid;

      /**
       * @description Rule set for workspace members.
       * @path /workspaces/{workspaceId}/members/{userId}
       * @allow (create) If the user is the owner of the workspace.
       * @allow (get) If the user is the owner of the workspace.
       * @allow (update) If the user is the owner of the workspace.
       * @allow (delete) If the user is the owner of the workspace.
       * @deny (list) Listing workspace members is not allowed.
       * @principle Enforces workspace ownership.
       */
      match /members/{userId} {
        allow get: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow list: if false;
        allow create: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      }

      /**
       * @description Rule set for AI configuration.
       * @path /workspaces/{workspaceId}/aiConfig/config
       * @allow (get) If the user is the owner of the workspace.
       * @allow (update) If the user is the owner of the workspace.
       * @allow (create) Not directly allowed; the config is likely created via a backend function.
       * @allow (delete) If the user is the owner of the workspace.
       * @deny (create) Creation should happen via a server function, not client-side.
       * @deny (list) Listing AI configs is not applicable as it's a singleton.
       * @principle Enforces workspace ownership.
       */
      match /aiConfig/config {
        allow get: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow list: if false;
        allow create: if false;
        allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      }

      /**
       * @description Rule set for knowledge documents.
       * @path /workspaces/{workspaceId}/knowledge/{docId}
       * @allow (get) If the user is the owner of the workspace.
       * @allow (update) If the user is the owner of the workspace.
       * @allow (create) If the user is the owner of the workspace.
       * @allow (delete) If the user is the owner of the workspace.
       * @allow (list) If the user is the owner of the workspace.
       * @principle Enforces workspace ownership.
       */
      match /knowledge/{docId} {
        allow get: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow create: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      }

      /**
       * @description Rule set for training runs.
       * @path /workspaces/{workspaceId}/trainingRuns/{runId}
       * @allow (get) If the user is the owner of the workspace.
       * @allow (update) If the user is the owner of the workspace.
       * @allow (create) If the user is the owner of the workspace.
       * @allow (delete) If the user is the owner of the workspace.
       * @allow (list) If the user is the owner of the workspace.
       * @principle Enforces workspace ownership.
       */
      match /trainingRuns/{runId} {
        allow get: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow create: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        allow delete: if get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      }
    }
  }
}