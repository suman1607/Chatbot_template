/**
 * @file Firestore Security Rules for ChatGenius application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where creators can only access data
 * associated with their creator ID. Data is denormalized to enable simple authorization
 * checks without requiring additional reads.
 *
 * Data Structure:
 * The data is organized under the /creators/{creatorId} path, with subcollections for
 * various entities like conversations, AI training data, teams, and widgets.
 * Each document within these subcollections includes a 'creatorId' field to ensure
 * authorization independence.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed for privacy.
 * - All write operations are strictly validated against the authenticated user's ID
 *   to prevent unauthorized data modification.
 * - The rules prioritize authorization and relational integrity, omitting comprehensive schema validation for prototyping speed.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` calls, the `creatorId` is denormalized into each document under the
 * `/creators/{creatorId}` path. This allows rules to directly check ownership without
 * additional database reads.
 *
 * Structural Segregation:
 * All data within a creator's subcollections is considered private. Public data, if needed in the future,
 * should be stored in separate top-level collections with appropriate public read rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their own document.
     * @allow (get, list, update, delete) Only the user themselves can access their document.
     * @deny (create) User cannot create a document with a mismatched userId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for workspace documents.
     * @path /workspaces/{workspaceId}
     * @allow (create) User with matching workspaceId can create their own workspace.
     * @allow (get, list, update, delete) Only the workspace owner can access and modify the workspace.
     * @deny (create) User cannot create a workspace with a mismatched workspaceId.
     * @principle Enforces workspace ownership and prevents unauthorized access.
     */
    match /workspaces/{workspaceId} {
      allow get: if isOwner(workspaceId);
      allow list: if false;
      allow create: if isOwner(workspaceId);
      allow update: if isExistingOwner(workspaceId);
      allow delete: if isExistingOwner(workspaceId);
    }

    /**
     * @description Rules for creator documents.
     * @path /creators/{creatorId}
     * @allow (create) Creator with matching creatorId can create their own document.
     * @allow (get, list, update, delete) Only the creator themselves can access their document.
     * @deny (create) User cannot create a document with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId} {
      allow get: if isOwner(creatorId);
      allow list: if false;
      allow create: if isOwner(creatorId);
      allow update: if isExistingOwner(creatorId);
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for creator dashboard documents.
     * @path /creators/{creatorId}/dashboard
     * @allow (get, list, create, update, delete) Only the creator themselves can access their dashboard.
     * @deny (create) User cannot create a dashboard with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/dashboard {
      allow get: if isOwner(creatorId);
      allow list: if false;
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for conversation documents.
     * @path /creators/{creatorId}/conversations/{conversationId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their conversations.
     * @deny (create) User cannot create a conversation with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/conversations/{conversationId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for AI training documents.
     * @path /creators/{creatorId}/ai_training/{aiTrainingId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their AI training data.
     * @deny (create) User cannot create AI training data with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/ai_training/{aiTrainingId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for article documents.
     * @path /creators/{creatorId}/ai_training/{aiTrainingId}/articles/{articleId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their articles.
     * @deny (create) User cannot create an article with a mismatched creatorId through aiTrainingId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/ai_training/{aiTrainingId}/articles/{articleId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if get(/databases/$(database)/documents/creators/$(creatorId)/ai_training/$(aiTrainingId)).data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && get(/databases/$(database)/documents/creators/$(creatorId)/ai_training/$(aiTrainingId)).data.creatorId == request.auth.uid;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for team documents.
     * @path /creators/{creatorId}/teams/{teamId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their teams.
     * @deny (create) User cannot create a team with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/teams/{teamId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for agent documents.
     * @path /creators/{creatorId}/agents/{agentId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their agents.
     * @deny (create) User cannot create an agent with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/agents/{agentId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for widget documents.
     * @path /creators/{creatorId}/widgets/{widgetId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their widgets.
     * @deny (create) User cannot create a widget with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/widgets/{widgetId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for analytics documents.
     * @path /creators/{creatorId}/analytics/{analyticsId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their analytics.
     * @deny (create) User cannot create analytics with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/analytics/{analyticsId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for billing documents.
     * @path /creators/{creatorId}/billing/{billingId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their billing information.
     * @deny (create) User cannot create billing information with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/billing/{billingId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for settings documents.
     * @path /creators/{creatorId}/settings/{settingsId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their settings.
     * @deny (create) User cannot create settings with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/settings/{settingsId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

    /**
     * @description Rules for support ticket documents.
     * @path /creators/{creatorId}/support_tickets/{supportTicketId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their support tickets.
     * @deny (create) User cannot create a support ticket with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/support_tickets/{supportTicketId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingOwner(creatorId);
    }

     /**
     * @description Rules for activity documents.
     * @path /creators/{creatorId}/activities/{activityId}
     * @allow (get, list, create, update, delete) Only the creator themselves can access their activity logs.
     * @deny (create) User cannot create an activity log with a mismatched creatorId.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /creators/{creatorId}/activities/{activityId} {
      allow get: if isOwner(creatorId);
      allow list: if isOwner(creatorId);
      allow create: if get(/databases/$(database)/documents/creators/$(creatorId)/dashboard).data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(creatorId) && get(/databases/$(database)/documents/creators/$(creatorId)/dashboard).data.creatorId == request.auth.uid;
      allow delete: if isExistingOwner(creatorId);
    }
  }
}