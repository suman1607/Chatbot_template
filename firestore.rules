/**
 * @fileoverview Firestore Security Rules for ChatGenius Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user identity and role within workspaces,
 * while relaxing data shape validation to enable rapid prototyping. It enforces a strict
 * user-ownership model for personal data and a role-based access control model for workspaces.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profile information, accessible only to the user themselves.
 * - `/workspaces/{workspaceId}`: Top-level settings for a workspace, owned by a specific user.
 * - `/workspaces/{workspaceId}/members/{userId}`: Roles and permissions for users in a workspace.
 * - `/workspaces/{workspaceId}/aiConfig/config`: Singleton document containing AI configuration for the workspace.
 * - `/workspaces/{workspaceId}/knowledge/{docId}`: Knowledge source documents for AI training.
 * - `/workspaces/{workspaceId}/trainingRuns/{runId}`: Log of AI training jobs for the workspace.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Workspace data is secured using a role-based access control model.
 * - Listing of workspace members is allowed only for authenticated users within the workspace.
 * - The AI configuration document is accessible to workspace members.
 * - Data validation is minimized to accelerate development, focusing on ownership and roles.
 *
 * Denormalization for Authorization:
 * - Workspace documents include an `ownerId` field to simplify ownership checks.
 * - Workspace member documents include a `role` field defining the user's permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     *   Example: A user with UID "user123" can read, create, update, and delete the document at /users/user123.
     * @deny (get, create, update, delete, list) if the user is not the owner.
     *   Example: A user with UID "user456" cannot access the document at /users/user123.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to workspace settings.
     * @path /workspaces/{workspaceId}
     * @allow (get, list) if true (public read).
     * @allow (create) if the request includes the ownerId set to the user's id.
     * @allow (update, delete) if the user is the owner of the workspace.
     * @deny (create, update, delete) if the user is not authenticated.
     * @principle Enforces document ownership for writes.
     */
    match /workspaces/{workspaceId} {
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to workspace member roles and permissions.
     * @path /workspaces/{workspaceId}/members/{userId}
     * @allow (get, list) if the user is authenticated.
     * @allow (create) if the user is the owner of the workspace.
     * @allow (update, delete) if the user is the owner of the workspace.
     * @deny (create, update, delete) if the user is not the owner of the workspace.
     * @principle Enforces workspace ownership for managing members.
     */
    match /workspaces/{workspaceId}/members/{userId} {
      function isWorkspaceOwner(workspaceId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isWorkspaceOwner(workspaceId);
      allow update: if isSignedIn() && isWorkspaceOwner(workspaceId);
      allow delete: if isSignedIn() && isWorkspaceOwner(workspaceId);
    }

    /**
     * @description Controls access to the AI configuration for a workspace.
     * @path /workspaces/{workspaceId}/aiConfig/config
     * @allow (get) if the user is an authenticated member of the workspace.
     * @allow (create, update, delete) if the user is the owner of the workspace.
     * @deny (create, update, delete) if the user is not the owner of the workspace.
     * @principle Enforces workspace ownership for managing AI configuration.
     */
    match /workspaces/{workspaceId}/aiConfig/config {
        function isWorkspaceOwner(workspaceId) {
            return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        }
        function isWorkspaceMember(workspaceId) {
          return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid));
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isWorkspaceMember(workspaceId);
        allow list: if false;
        allow create: if isSignedIn() && isWorkspaceOwner(workspaceId);
        allow update: if isSignedIn() && isWorkspaceOwner(workspaceId);
        allow delete: if isSignedIn() && isWorkspaceOwner(workspaceId);
    }

    /**
     * @description Controls access to knowledge source documents for AI training.
     * @path /workspaces/{workspaceId}/knowledge/{docId}
     * @allow (get, list) if the user is an authenticated member of the workspace.
     * @allow (create, update, delete) if the user is the owner of the workspace.
     * @deny (create, update, delete) if the user is not the owner of the workspace.
     * @principle Enforces workspace ownership for managing knowledge sources.
     */
    match /workspaces/{workspaceId}/knowledge/{docId} {
        function isWorkspaceOwner(workspaceId) {
            return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
        }

        function isWorkspaceMember(workspaceId) {
            return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid));
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn() && isWorkspaceMember(workspaceId);
        allow create: if isSignedIn() && isWorkspaceOwner(workspaceId);
        allow update: if isSignedIn() && isWorkspaceOwner(workspaceId);
        allow delete: if isSignedIn() && isWorkspaceOwner(workspaceId);
    }

    /**
     * @description Controls access to the log of AI training jobs for a workspace.
     * @path /workspaces/{workspaceId}/trainingRuns/{runId}
     * @allow (get, list) if the user is an authenticated member of the workspace.
     * @allow (create, update, delete) if the user is the owner of the workspace.
     * @deny (create, update, delete) if the user is not the owner of the workspace.
     * @principle Enforces workspace ownership for managing training runs.
     */
    match /workspaces/{workspaceId}/trainingRuns/{runId} {
      function isWorkspaceOwner(workspaceId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
      }

      function isWorkspaceMember(workspaceId) {
          return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid));
      }
      function isSignedIn() {
            return request.auth != null;
        }

      allow get, list: if isSignedIn() && isWorkspaceMember(workspaceId);
      allow create: if isSignedIn() && isWorkspaceOwner(workspaceId);
      allow update: if isSignedIn() && isWorkspaceOwner(workspaceId);
      allow delete: if isSignedIn() && isWorkspaceOwner(workspaceId);
    }
  }
}