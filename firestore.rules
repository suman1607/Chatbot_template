/**
 * @fileoverview Firestore Security Rules for ChatGenius.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership and role-based access control model.
 * Most data is scoped to a specific workspace, and access is determined by the user's role within that workspace.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /workspaces/{workspaceId}: Stores workspace settings, accessible to workspace members based on their roles.
 * - /workspaces/{workspaceId}/members/{userId}: Defines user roles within a workspace.
 * - /workspaces/{workspaceId}/aiConfig: Stores the AI configuration for a workspace, accessible to workspace members.
 * - /workspaces/{workspaceId}/knowledge/{docId}: Stores knowledge documents, accessible to workspace members.
 * - /workspaces/{workspaceId}/trainingRuns/{runId}: Stores training run logs, accessible to workspace members.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Workspace access is role-based (Owner, Manager, Agent, Viewer).
 * - Listing of workspaces is not allowed.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * - Workspace membership is managed via the `/workspaces/{workspaceId}/members/{userId}` collection, allowing easy role-based access checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching UID can access their profile.
     * @deny (get, create, update, delete) User attempts to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure workspace settings. Access is role-based, determined by workspace membership.
     * @path /workspaces/{workspaceId}
     * @allow (get) Workspace members can read workspace settings.
     * @allow (create) Workspace owner can create a workspace.
     * @allow (update, delete) Workspace owner can update or delete workspace settings.
     * @deny (get, create, update, delete) Non-members cannot access workspace settings.
     * @principle Enforces role-based access control for workspaces.
     */
    match /workspaces/{workspaceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isWorkspaceMember(workspaceId, userId) {
        return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId));
      }

      function isWorkspaceOwner(workspaceId, userId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data.role == 'Owner';
      }

      function isExistingWorkspaceOwner(workspaceId, userId) {
        return isWorkspaceOwner(workspaceId, userId) && exists(resource);
      }

      allow get: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
      allow delete: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);

      /**
       * @description Secure workspace membership. Workspace owners can manage membership.
       * @path /workspaces/{workspaceId}/members/{userId}
       * @allow (get) Workspace members can read workspace membership.
       * @allow (create) Workspace owner can add members.
       * @allow (update, delete) Workspace owner can update or delete members.
       * @deny (get, create, update, delete) Non-members cannot access workspace membership.
       * @principle Enforces role-based access control for workspace membership.
       */
      match /members/{userId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isWorkspaceMember(workspaceId, userId) {
          return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId));
        }

        function isWorkspaceOwner(workspaceId, userId) {
          return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data.role == 'Owner';
        }

        function isExistingWorkspaceOwner(workspaceId, userId) {
          return isWorkspaceOwner(workspaceId, userId) && exists(resource);
        }

        allow get: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow list: if false;
        allow create: if isSignedIn() && isWorkspaceOwner(workspaceId, request.auth.uid);
        allow update: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
        allow delete: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
      }

      /**
       * @description Secure AI configuration for a workspace. Access is restricted to workspace members.
       * @path /workspaces/{workspaceId}/aiConfig
       * @allow (get) Workspace members can read the AI configuration.
       * @allow (create, update, delete) Workspace owners can manage the AI configuration.
       * @deny (get, create, update, delete) Non-members cannot access the AI configuration.
       * @principle Enforces role-based access control for AI configuration.
       */
      match /aiConfig {
        function isSignedIn() {
          return request.auth != null;
        }

        function isWorkspaceMember(workspaceId, userId) {
          return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId));
        }

        function isWorkspaceOwner(workspaceId, userId) {
          return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data.role == 'Owner';
        }

        function isExistingWorkspaceOwner(workspaceId, userId) {
          return isWorkspaceOwner(workspaceId, userId) && exists(resource);
        }
       
        allow get: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow list: if false;
        allow create: if isSignedIn() && isWorkspaceOwner(workspaceId, request.auth.uid);
        allow update: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
        allow delete: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
      }

      /**
       * @description Secure knowledge documents for AI training. Access is restricted to workspace members.
       * @path /workspaces/{workspaceId}/knowledge/{docId}
       * @allow (get, list) Workspace members can read and list knowledge documents.
       * @allow (create, update, delete) Workspace owners can manage knowledge documents.
       * @deny (get, create, update, delete) Non-members cannot access knowledge documents.
       * @principle Enforces role-based access control for knowledge documents.
       */
      match /knowledge/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isWorkspaceMember(workspaceId, userId) {
          return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId));
        }

        function isWorkspaceOwner(workspaceId, userId) {
          return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data.role == 'Owner';
        }

        function isExistingWorkspaceOwner(workspaceId, userId) {
          return isWorkspaceOwner(workspaceId, userId) && exists(resource);
        }
       
        allow get: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow list: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow create: if isSignedIn() && isWorkspaceOwner(workspaceId, request.auth.uid);
        allow update: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
        allow delete: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
      }

      /**
       * @description Secure AI training run logs. Access is restricted to workspace members.
       * @path /workspaces/{workspaceId}/trainingRuns/{runId}
       * @allow (get, list) Workspace members can read and list training run logs.
       * @allow (create) Workspace members can create training run logs.
       * @allow (update, delete) Not allowed for non-admin.
       * @deny (get, create, update, delete) Non-members cannot access training run logs.
       * @principle Enforces role-based access control for training run logs.
       */
      match /trainingRuns/{runId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isWorkspaceMember(workspaceId, userId) {
          return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId));
        }

        function isWorkspaceOwner(workspaceId, userId) {
          return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data.role == 'Owner';
        }

        function isExistingWorkspaceOwner(workspaceId, userId) {
          return isWorkspaceOwner(workspaceId, userId) && exists(resource);
        }

        allow get: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow list: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow create: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow update: if false;
        allow delete: if false;
      }
    }
       match /workspaces/{workspaceId}/members/{userId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isWorkspaceMember(workspaceId, userId) {
          return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId));
        }

        function isWorkspaceOwner(workspaceId, userId) {
          return get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid)).data.role == 'Owner';
        }

        function isExistingWorkspaceOwner(workspaceId, userId) {
          return isWorkspaceOwner(workspaceId, userId) && exists(resource);
        }

        allow get: if isSignedIn() && isWorkspaceMember(workspaceId, request.auth.uid);
        allow list: if false;
        allow create: if isSignedIn() && isWorkspaceOwner(workspaceId, request.auth.uid);
        allow update: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
        allow delete: if isSignedIn() && isExistingWorkspaceOwner(workspaceId, request.auth.uid);
      }
  }
}