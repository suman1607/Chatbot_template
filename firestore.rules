/**
 * @fileoverview Firestore Security Rules for ChatGenius Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user and workspace ownership.
 * Schema validation is relaxed to enable rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /workspaces/{workspaceId}: Top-level settings for a workspace.
 * - /workspaces/{workspaceId}/members/{userId}: Roles and permissions for users within a workspace.
 * - /workspaces/{workspaceId}/aiConfig: Singleton document for AI configuration.
 * - /workspaces/{workspaceId}/knowledge/{knowledgeId}: Collection of knowledge source documents for AI training.
 * - /workspaces/{workspaceId}/trainingRuns/{runId}: Log of AI training jobs.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Workspace data access is controlled by workspace membership and roles.
 * - The aiConfig document is secured to workspace members.
 * - Knowledge and TrainingRun documents are secured to workspace members.
 *
 * Denormalization for Authorization:
 * - Workspace membership is checked directly via the `/workspaces/{workspaceId}/members/{userId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles; only the owner can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their own profile at /users/user123.
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the profile of user 'user123' at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects workspace settings; only workspace members can read workspace details
     * @path /workspaces/{workspaceId}
     * @allow (get, list) User 'user123' can read/list the workspace at /workspaces/workspace1 if they are a member
     * @allow (create) User 'user123' can create a workspace
     * @deny (get, list) User 'user456' cannot read/list the workspace at /workspaces/workspace1 if they are not a member.
     * @principle Enforces workspace membership for read access.
     */
    match /workspaces/{workspaceId} {
      allow get: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isWorkspaceOwner(workspaceId, request.auth.uid);
      allow delete: if isWorkspaceOwner(workspaceId, request.auth.uid);
    }

    /**
     * @description Manages workspace member roles; only workspace owners can manage members.
     * @path /workspaces/{workspaceId}/members/{userId}
     * @allow (get, create, update, delete) Workspace owner 'owner123' can manage members in workspace 'workspace1'.
     * @deny (get, create, update, delete) Non-owner 'user456' cannot manage members in workspace 'workspace1'.
     * @principle Restricts workspace membership management to workspace owners.
     */
    match /workspaces/{workspaceId}/members/{userId} {
      allow get: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow list: if false;
      allow create: if isWorkspaceOwner(workspaceId, request.auth.uid);
      allow update: if isWorkspaceOwner(workspaceId, request.auth.uid);
      allow delete: if isWorkspaceOwner(workspaceId, request.auth.uid);
    }

    /**
     * @description Secures the AI configuration; only workspace members can access/modify.
     * @path /workspaces/{workspaceId}/aiConfig
     * @allow (get, update) User 'user123' can read/update the AI config in workspace 'workspace1' if they are a member.
     * @deny (get, update) User 'user456' cannot read/update the AI config in workspace 'workspace1' if they are not a member.
     * @principle Enforces workspace membership for AI configuration access.
     */
    match /workspaces/{workspaceId}/aiConfig {
      allow get: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow list: if false;
      allow create: if false;
      allow update: if isWorkspaceOwner(workspaceId, request.auth.uid);
      allow delete: if false;
    }

    /**
     * @description Controls access to knowledge documents; only workspace members can manage knowledge.
     * @path /workspaces/{workspaceId}/knowledge/{knowledgeId}
     * @allow (get, list, create, update, delete) User 'user123' can manage knowledge in workspace 'workspace1' if they are a member.
     * @deny (get, list, create, update, delete) User 'user456' cannot manage knowledge in workspace 'workspace1' if they are not a member.
     * @principle Restricts knowledge management to workspace members.
     */
    match /workspaces/{workspaceId}/knowledge/{knowledgeId} {
      allow get: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow list: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow create: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow update: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow delete: if isWorkspaceOwner(workspaceId, request.auth.uid);
    }

    /**
     * @description Restricts access to training run logs; only workspace members can view training runs.
     * @path /workspaces/{workspaceId}/trainingRuns/{runId}
     * @allow (get, list) User 'user123' can view training runs in workspace 'workspace1' if they are a member.
     * @allow (create) User 'user123' can create training runs if they are a member
     * @deny (get, list) User 'user456' cannot view training runs in workspace 'workspace1' if they are not a member.
     * @principle Enforces workspace membership for training run access.
     */
    match /workspaces/{workspaceId}/trainingRuns/{runId} {
      allow get: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow list: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow create: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow update: if isWorkspaceOwner(workspaceId, request.auth.uid);
      allow delete: if isWorkspaceOwner(workspaceId, request.auth.uid);
    }

    /** Helper functions **/
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isWorkspaceMember(workspaceId, userId) {
        return exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId));
    }

    function isWorkspaceOwner(workspaceId, userId) {
      return isWorkspaceMember(workspaceId, userId) && get(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(userId)).data.role == 'Owner';
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}